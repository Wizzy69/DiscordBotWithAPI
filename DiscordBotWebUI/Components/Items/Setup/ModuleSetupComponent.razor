@using DiscordBotCore
@using DiscordBotCore.Modules
@using DiscordBotCore.Others.Exceptions
@using DiscordBotWebUI.Types
@code {
[Parameter] public Action NextStep { get; set; }
[Parameter] public ModuleRequirement ModuleRequirementReference { get; set; }

private List<MarketItem> MarketItems = new List<MarketItem>();

protected override async Task OnInitializedAsync()
{
    await base.OnInitializedAsync();
        
    foreach(var requirement in ModuleRequirementReference.RequiredModulesWithTypes)
    {
        var modulesWithType = await Application.CurrentApplication.ModuleManager.ServerGetAllModules(requirement);
        AppendToList(modulesWithType);
    }

    foreach (var moduleName in ModuleRequirementReference.RequiredModulesWithNames)
    {
        var        module = await Application.CurrentApplication.ModuleManager.ServerGetModuleWithName(moduleName);
        MarketItem item   = new MarketItem(module.ModuleName, module.ModuleAuthor, module.ModuleDescription, ItemType.Module);
        MarketItems.Add(item);
    }
}
    
private void AppendToList(List<ModuleOnlineData> listOfModules)
{
    foreach (var module in listOfModules)
    {
        MarketItem item = new MarketItem(module.ModuleName, module.ModuleAuthor, module.ModuleDescription, ItemType.Module);
        MarketItems.Add(item);
    }
}

}

<RadzenHeading Size="H4">Download Dependencies</RadzenHeading>
<p>The bot needs to download certain files to function properly.</p>

@if (MarketItems.Any())
{
    <Marketplace ListedItems="MarketItems"/>
}

<RadzenButton Click="NextStep" Text="Next"/>